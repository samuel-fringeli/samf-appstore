{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["props","searchApps","event","setState","searchValue","target","value","state","apps","error","hrefSplit","window","location","href","split","length","startsWith","searchQuery","replace","this","axios","get","then","data","className","type","placeholder","onChange","filter","app","RegExp","test","name","map","key","appId","src","iconImg","alt","seller","React","Component","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4VAKI,WAAYA,GAAQ,IAAD,8BACf,4CAAMA,KA2BVC,WAAa,SAAAC,GACT,EAAKC,SAAS,CAAEC,YAAaF,EAAMG,OAAOC,SA1B1C,EAAKC,MAAQ,CACTC,MAAM,EACNC,OAAO,EACPL,YAAa,IANF,E,iFAUE,IAAD,OACVM,EAAYC,OAAOC,SAASC,KAAKC,MAAM,KAC7C,GAAyB,IAArBJ,EAAUK,QACNL,EAAU,GAAGM,WAAW,MAAO,CAC/B,IAAMC,EAAcP,EAAU,GAAGQ,QAAQ,KAAM,IAC/CC,KAAKhB,SAAS,CAAEC,YAAaa,IAIrCG,IAAMC,IAAI,cAAcC,MAAK,YAAe,IAAZC,EAAW,EAAXA,KACxB,UAAWA,EACX,EAAKpB,SAAS,CAACM,MAAOc,EAAKd,QAE3B,EAAKN,SAAS,CAACK,KAAMe,S,+BASvB,IAAD,OACL,OACI,yBAAKC,UAAU,uBACTL,KAAKZ,MAAME,MACT,yBAAKe,UAAU,uCAAwCL,KAAKZ,MAAME,OACnEU,KAAKZ,MAAMC,KACV,6BACI,wBAAIgB,UAAU,eAAd,iBACA,yBAAKA,UAAU,4CACX,2BAAOC,KAAK,OAAOC,YAAY,MACxBC,SAAUR,KAAKlB,WAAYK,MAAOa,KAAKZ,MAAMH,eAEtDe,KAAKZ,MAAMC,KAAKoB,QAAO,SAAAC,GAAG,OACvB,IAAIC,OAAO,EAAKvB,MAAMH,YAAa,MAAO2B,KAAKF,EAAIG,SACtDC,KAAI,SAAAJ,GAAG,OACL,yBAAKK,IAAKL,EAAIM,OACV,yBAAKX,UAAU,4DACX,yBAAKA,UAAU,YACX,yBAAKA,UAAU,UACVY,IAAK,uBAAyBP,EAAIQ,QAClCC,IAAK,YAAcT,EAAIG,QAEhC,yBAAKR,UAAU,qBACTK,EAAIG,KAAM,6BACVH,EAAIU,QAEV,yBAAKf,UAAU,sCACX,yBAAKA,UAAU,iCACX,uBAAGX,KAAM,8EAAgFgB,EAAIM,MAAQ,mBAArG,eAOzB,U,GApEUK,IAAMC,WCQfC,QACW,cAA7B/B,OAAOC,SAAS+B,UAEe,UAA7BhC,OAAOC,SAAS+B,UAEhBhC,OAAOC,SAAS+B,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM7B,MAAK,SAAA8B,GACjCA,EAAaC,kB","file":"static/js/main.df23ee01.chunk.js","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\nimport axios from 'axios';\r\n\r\nexport default class extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            apps: false,\r\n            error: false,\r\n            searchValue: ''\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        const hrefSplit = window.location.href.split('?');\r\n        if (hrefSplit.length === 2) {\r\n            if (hrefSplit[1].startsWith('s=')) {\r\n                const searchQuery = hrefSplit[1].replace('s=', '');\r\n                this.setState({ searchValue: searchQuery });\r\n            }\r\n        }\r\n\r\n        axios.get('/api/apps/').then(({ data }) => {\r\n            if ('error' in data) {\r\n                this.setState({error: data.error});\r\n            } else {\r\n                this.setState({apps: data});\r\n            }\r\n        });\r\n    }\r\n\r\n    searchApps = event => {\r\n        this.setState({ searchValue: event.target.value });\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container mb-4 mt-4\">\r\n                { this.state.error ? (\r\n                    <div className=\"alert alert-danger text-center mt-4\">{ this.state.error }</div>\r\n                ): this.state.apps ? (\r\n                    <div>\r\n                        <h3 className=\"text-center\">SAMF AppStore</h3>\r\n                        <div className=\"search row d-flex justify-content-center\">\r\n                            <input type=\"text\" placeholder=\"App\"\r\n                                   onChange={this.searchApps} value={this.state.searchValue}/>\r\n                        </div>\r\n                        { this.state.apps.filter(app =>\r\n                            (new RegExp(this.state.searchValue, 'ig')).test(app.name)\r\n                        ).map(app => (\r\n                            <div key={app.appId}>\r\n                                <div className=\"row d-flex justify-content-center appShortInfosContainer\">\r\n                                    <div className=\"col-auto\">\r\n                                        <img className=\"iconImg\"\r\n                                             src={'https://ipa.samf.me/' + app.iconImg }\r\n                                             alt={'icon for ' + app.name}/>\r\n                                    </div>\r\n                                    <div className=\"col appShortInfos\">\r\n                                        { app.name }<br/>\r\n                                        { app.seller }\r\n                                    </div>\r\n                                    <div className=\"col-auto d-flex align-items-center\">\r\n                                        <div className=\"btn btn-sm btn-light dlButton\">\r\n                                            <a href={'itms-services://?action=download-manifest&url=https://appstore.samf.me/api/' + app.appId + '/manifest.plist'}>GET</a>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        )) }\r\n                    </div>\r\n                ): null}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}