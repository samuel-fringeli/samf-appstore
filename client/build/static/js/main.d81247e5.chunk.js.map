{"version":3,"sources":["components/VideoHeader.js","components/NewTrigger.js","components/TriggersList.js","components/VideoList.js","App.js","serviceWorker.js","index.js"],"names":["goToVideosList","window","history","pushState","props","appContext","setState","videoId","axios","get","this","state","then","data","error","length","videoInfos","className","onClick","controls","ref","videoRef","src","htmlFor","href","url","type","readOnly","id","value","title","React","Component","startTime","endTime","categoryId","categoriesList","addNewTrigger","isNumber","alert","post","res","refreshTriggersList","refreshTime","button","newState","Math","round","current","currentTime","element","test","map","category","selected","name","onChange","event","target","deleteTrigger","triggerId","triggersList","scope","trigger","searchValue","originalVideoList","filteredVideoList","goToVideo","filterVideoList","withSearchValue","filter","video","toLowerCase","includes","searchVideos","newList","Array","from","placeholder","firstLoad","urlMatch","location","split","replace","createRef","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d81247e5.chunk.js","sourcesContent":["import React from 'react';\nimport axios from 'axios';\n\nexport default class extends React.Component {\n    componentDidMount() {\n        axios.get('/api/video-infos/' + this.props.appContext.state.videoId).then(({ data }) => {\n            if ('error' in data) {\n                this.props.appContext.setState({error: data.error});\n            } else {\n                if (data.length === 0) {\n                    this.props.appContext.setState({error: \"This video doesn't exist\"});\n                }\n                this.props.appContext.setState({videoInfos: data[0]});\n            }\n        });\n    }\n\n    goToVideosList = () => {\n        window.history.pushState({}, \"ASMR triggers\", \"/\");\n        this.props.appContext.setState({videoId: 0});\n    };\n\n    render() {\n        let videoInfos = this.props.appContext.state.videoInfos;\n        return (\n            <div>\n                { !videoInfos ? (\n                    <div className=\"text-center\">getting video infos...</div>\n                ):(\n                    <div>\n                        <div className=\"text-center\">\n                            <h1>\n                                <button className=\"btn btn-primary mr-3\" onClick={ this.goToVideosList }>Back</button>\n                                Video Trigger Croper\n                            </h1>\n                            <br/>\n                            <video controls=\"controls\" ref={this.props.appContext.videoRef} className=\"w-100\" src={videoInfos['server-url']}/>\n                            {/*<iframe width=\"560\" height=\"315\"\n                                    src={ 'https://www.youtube.com/embed/' + videoInfos.url.split('watch?v=')[1] }\n                                    frameBorder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"\n                                    allowFullScreen/>*/}\n                        </div>\n                        <br/>\n\n                        <div className=\"row\">\n                            <form className=\"col\">\n                                <div className=\"form-group row mb-1\">\n                                    <label htmlFor=\"url\" className=\"col-sm-3 col-form-label\">YouTube URL</label>\n                                    <div className=\"col-sm-9\">\n                                        <a className=\"d-block mt-2\"\n                                           href={ videoInfos.url }>{ videoInfos.url }</a>\n                                    </div>\n                                </div>\n                                <div className=\"form-group row mb-1\">\n                                    <label htmlFor=\"url\" className=\"col-sm-3 col-form-label\">Server URL</label>\n                                    <div className=\"col-sm-9\">\n                                        <a className=\"d-block mt-2\"\n                                           href={ videoInfos['server-url'] }>{ videoInfos['server-url'] }</a>\n                                    </div>\n                                </div>\n                                <div className=\"form-group row mt-3\">\n                                    <label htmlFor=\"title\" className=\"col-sm-3 col-form-label\">Title</label>\n                                    <div className=\"col-sm-9\">\n                                        <input type=\"text\" readOnly className=\"form-control\" id=\"title\"\n                                               value={ videoInfos.title }/>\n                                    </div>\n                                </div>\n                            </form>\n                        </div>\n                        <br/>\n                    </div>\n                )}\n            </div>\n        )\n    }\n};\n","import React from 'react';\nimport axios from 'axios';\n\nexport default class extends React.Component {\n    state = {\n        startTime: 0,\n        endTime: 0,\n        categoryId: null,\n        categoriesList: [],\n    };\n\n    componentDidMount() {\n        axios.get('/api/trigger-categories').then(({ data }) => {\n            if ('error' in data) {\n                this.props.appContext.setState({error: data.error});\n            } else {\n                this.setState({categoriesList: data, categoryId: 1});\n            }\n        });\n    }\n\n    addNewTrigger = () => {\n        let { startTime, endTime, categoryId } = this.state;\n        if (!this.isNumber(startTime) || (!this.isNumber(endTime)|| (!this.isNumber(categoryId)))) {\n            alert('error. please verify your fields');\n            return;\n        }\n        if (startTime >= endTime) {\n            alert('Start time must be smaller than end time');\n            return;\n        }\n        axios.post('/api/new-trigger/' + this.props.appContext.state.videoId, {\n            startTime: startTime, endTime: endTime, categoryId: categoryId\n        }).then(res => {\n            this.props.appContext.refreshTriggersList(this.props.appContext.state.videoId);\n        })\n    };\n\n    isNumber(element) {\n        return /^[0-9\\.]+$/.test(element);\n    };\n\n    refreshTime = button => () => {\n        let newState = {};\n        newState[button] = Math.round(this.props.appContext.videoRef.current.currentTime * 100) / 100;\n        this.setState(newState);\n    };\n\n    render() {\n        return (\n            <div>\n                <h1 className=\"text-center\">New Trigger</h1>\n                <br/>\n                <div className=\"form-group row\">\n                    <label htmlFor=\"url\" className=\"col-sm-2 col-form-label\">Category</label>\n                    <div className=\"col-sm-10\">\n                        { this.state.categoriesList.length > 0 ? (\n                            <select className=\"form-control\">\n                                {this.state.categoriesList.map(category => (\n                                    <option value={category.id}\n                                            selected={category.id === this.state.categoryId}>\n                                        {category.name}\n                                    </option>\n                                ))}\n                            </select>\n                        ):null }\n                    </div>\n                </div>\n                <div className=\"form-group row\">\n                    <div className=\"col-sm-2\"/>\n                    <div className=\"col\">\n                        <div className=\"row\">\n                            <label className=\"col-auto col-form-label text-center\">Start (s)</label>\n                            <div className=\"col pr-1\">\n                                <input value={this.state.startTime} type=\"text\"\n                                       onChange={event => this.setState({ startTime: event.target.value})}\n                                       className={'form-control' + (this.isNumber(this.state.startTime) ? '':' is-invalid')}/>\n                            </div>\n                            <div className=\"col-auto pl-1\">\n                                <button className=\"btn btn-light\" onClick={this.refreshTime('startTime')}>\n                                    &#x21bb;\n                                </button>\n                            </div>\n                        </div>\n                    </div>\n\n                    <div className=\"col\">\n                        <div className=\"row\">\n                            <label className=\"col-auto col-form-label text-center\">End (s)</label>\n                            <div className=\"col pr-1\">\n                                <input value={this.state.endTime} type=\"text\"\n                                       onChange={event => this.setState({ endTime: event.target.value})}\n                                       className={'form-control' + (this.isNumber(this.state.endTime) ? '':' is-invalid')}/>\n                            </div>\n                            <div className=\"col-auto pl-1\">\n                                <button className=\"btn btn-light\" onClick={this.refreshTime('endTime')}>\n                                    &#x21bb;\n                                </button>\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"col-sm-2\">\n                        <button className=\"btn btn-primary\" onClick={this.addNewTrigger}>Add trigger</button>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n};\n","import React from 'react';\nimport axios from \"axios\";\n\nexport default class extends React.Component {\n    deleteTrigger = triggerId => () => {\n        axios.get('/api/delete-trigger/' + triggerId).then(res => {\n           this.props.appContext.refreshTriggersList(this.props.appContext.state.videoId);\n        });\n    };\n\n    render() {\n        return (\n            <div>\n                <h1 className=\"text-center mt-5\">All Triggers</h1>\n                <div className=\"row\">\n                    { this.props.appContext.state.triggersList.length === 0 ? (\n                        <div className=\"col\">\n                            <div className=\"text-center\">No trigger registered for this video</div>\n                        </div>\n                    ):(\n                        <table className=\"table table-striped mt-3\">\n                            <thead>\n                            <tr>\n                                <th scope=\"col\">Category</th>\n                                <th scope=\"col\">Start (s)</th>\n                                <th scope=\"col\">End (s)</th>\n                                <th scope=\"col\"/>\n                            </tr>\n                            </thead>\n                            <tbody>\n                            { this.props.appContext.state.triggersList.map((trigger) => (\n                                <tr>\n                                    <td>{ trigger.category }</td>\n                                    <td>{ trigger['start-time'] }</td>\n                                    <td>{ trigger['end-time'] }</td>\n                                    <td className=\"float-right\">\n                                        <button className=\"btn btn-primary\">Go</button>\n                                        <button className=\"btn btn-danger ml-3\"\n                                                onClick={this.deleteTrigger(trigger.id)}>\n                                            Delete\n                                        </button>\n                                    </td>\n                                </tr>\n                            )) }\n                            </tbody>\n                        </table>\n                    ) }\n                </div>\n            </div>\n        )\n    };\n}\n","import React from 'react';\nimport axios from \"axios\";\n\nexport default class extends React.Component {\n    state = {\n        searchValue: '',\n        originalVideoList: [],\n        filteredVideoList: []\n    };\n\n    goToVideo = (videoId) => () => {\n        window.history.pushState({}, \"ASMR triggers\", \"/video/\" + videoId + '/');\n        this.props.appContext.setState({ videoId: videoId, videoInfos: false });\n        this.props.appContext.refreshTriggersList(videoId);\n    };\n\n    filterVideoList = (withSearchValue=false) => {\n        let searchValue = !withSearchValue ? this.state.searchValue:withSearchValue;\n        return this.state.originalVideoList.filter(video => video.title.toLowerCase().includes(searchValue));\n    };\n\n    searchVideos = (event) => {\n        let newList = Array.from(this.filterVideoList(event.target.value));\n        this.setState({ searchValue: event.target.value, filteredVideoList: newList });\n    };\n\n    componentDidMount() {\n        axios.get('/api/videos').then(({ data }) => {\n            if ('error' in data) {\n                this.props.appContext.setState({error: data.error});\n            } else {\n                this.setState({originalVideoList: data, filteredVideoList: data});\n            }\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                <h1 className=\"text-center mb-4\">\n                    Video Trigger Croper\n                    <a href=\"https://ytdl.pyme.ch?saveInDB=true\" target=\"_blank\" className=\"btn btn-dark ml-3\" >Download more videos</a>\n                </h1>\n                <div className=\"row\">\n                    <div className=\"col\">\n                        <input className=\"form-control\" type=\"text\" placeholder=\"Search...\" value={this.state.searchValue} onChange={this.searchVideos}/>\n                        <br/>\n                        <table className=\"table table-bordered\">\n                            <thead>\n                            <tr>\n                                <th>Video title</th>\n                                <th className=\"text-center\">Video on Youtube</th>\n                                <th className=\"text-center\">Video details</th>\n                            </tr>\n                            </thead>\n                            <tbody>\n                            { this.state.filteredVideoList.map((video) => (\n                                <tr>\n                                    <td className=\"align-middle\">{video.title}</td>\n                                    <td className=\"text-center\">\n                                        <a className=\"text-white btn btn-danger\" target=\"_blank\" href={video.url}>Go</a>\n                                    </td>\n                                    <td className=\"text-center\">\n                                        <button className=\"btn btn-primary\" onClick={this.goToVideo(video.id)}>Go</button>\n                                    </td>\n                                </tr>\n                            ))}\n                            </tbody>\n                        </table>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\n","import React from 'react';\nimport VideoHeader from './components/VideoHeader';\nimport NewTrigger from \"./components/NewTrigger\";\nimport TriggersList from \"./components/TriggersList\";\nimport VideoList from \"./components/VideoList\";\nimport './App.css';\nimport axios from \"axios\";\n\nexport default class extends React.Component {\n    constructor(props) {\n        super(props);\n        this.firstLoad = true;\n        this.urlMatch = window.location.href.split('/video/');\n        this.state = {\n            videoId: this.urlMatch.length > 1 ? this.urlMatch[1].replace('/', '') : 0,\n            triggersList: [],\n            error: false,\n            videoInfos: false,\n        };\n        this.videoRef = React.createRef();\n    }\n\n    refreshTriggersList(videoId) {\n        axios.get('/api/video-triggers/' + videoId).then(({ data }) => {\n            if ('error' in data) {\n                this.setState({error: data.error});\n            } else {\n                this.setState({triggersList: data});\n            }\n        });\n    }\n\n    componentDidMount() {\n        if (this.urlMatch.length > 1 && this.firstLoad) {\n            this.refreshTriggersList(this.state.videoId);\n        }\n        this.firstLoad = false;\n    }\n\n    render() {\n        return (\n            <div className=\"container mb-4 mt-4\">\n                { this.state.error ? (\n                    <div className=\"alert alert-danger text-center mt-4\">{ this.state.error }</div>\n                ): this.state.videoId === 0 ? (\n                    <div>\n                        <VideoList appContext={this}/>\n                    </div>\n                ):( this.state.videoInfos ? (\n                    <div>\n                        <VideoHeader appContext={this}/>\n                        <NewTrigger appContext={this}/>\n                        <TriggersList appContext={this}/>\n                    </div>\n                ): <VideoHeader appContext={this}/> )}\n            </div>\n        );\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}